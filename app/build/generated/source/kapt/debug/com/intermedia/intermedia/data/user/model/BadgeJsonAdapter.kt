// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.user.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class BadgeJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Badge>() {
  private val options: JsonReader.Options = JsonReader.Options.of("title", "primary", "slug",
      "link")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "title")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "primary")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Badge").append(')') }

  public override fun fromJson(reader: JsonReader): Badge {
    var title: String? = null
    var primary: Boolean? = null
    var slug: String? = null
    var link: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> title = nullableStringAdapter.fromJson(reader)
        1 -> primary = nullableBooleanAdapter.fromJson(reader)
        2 -> slug = nullableStringAdapter.fromJson(reader)
        3 -> link = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Badge(
        title = title,
        primary = primary,
        slug = slug,
        link = link
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Badge?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("title")
    nullableStringAdapter.toJson(writer, value_.title)
    writer.name("primary")
    nullableBooleanAdapter.toJson(writer, value_.primary)
    writer.name("slug")
    nullableStringAdapter.toJson(writer, value_.slug)
    writer.name("link")
    nullableStringAdapter.toJson(writer, value_.link)
    writer.endObject()
  }
}

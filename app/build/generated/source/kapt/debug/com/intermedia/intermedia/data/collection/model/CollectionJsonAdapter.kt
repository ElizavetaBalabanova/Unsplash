// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.collection.model

import com.intermedia.intermedia.`data`.photo.model.Photo
import com.intermedia.intermedia.`data`.photo.model.Tag
import com.intermedia.intermedia.`data`.user.model.User
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CollectionJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Collection>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "title", "description",
      "published_at", "updated_at", "curated", "featured", "total_photos", "private", "share_key",
      "tags", "cover_photo", "preview_photos", "user", "links")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "description")

  private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
      moshi.adapter(Boolean::class.javaObjectType, emptySet(), "curated")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "total_photos")

  private val nullableListOfTagAdapter: JsonAdapter<List<Tag>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Tag::class.java), emptySet(),
      "tags")

  private val nullablePhotoAdapter: JsonAdapter<Photo?> = moshi.adapter(Photo::class.java,
      emptySet(), "cover_photo")

  private val nullableListOfPhotoAdapter: JsonAdapter<List<Photo>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Photo::class.java), emptySet(),
      "preview_photos")

  private val nullableUserAdapter: JsonAdapter<User?> = moshi.adapter(User::class.java, emptySet(),
      "user")

  private val nullableLinksAdapter: JsonAdapter<Links?> = moshi.adapter(Links::class.java,
      emptySet(), "links")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("Collection").append(')') }

  public override fun fromJson(reader: JsonReader): Collection {
    var id: String? = null
    var title: String? = null
    var description: String? = null
    var published_at: String? = null
    var updated_at: String? = null
    var curated: Boolean? = null
    var featured: Boolean? = null
    var total_photos: Int? = null
    var private_: Boolean? = null
    var share_key: String? = null
    var tags: List<Tag>? = null
    var cover_photo: Photo? = null
    var preview_photos: List<Photo>? = null
    var user: User? = null
    var links: Links? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        2 -> description = nullableStringAdapter.fromJson(reader)
        3 -> published_at = nullableStringAdapter.fromJson(reader)
        4 -> updated_at = nullableStringAdapter.fromJson(reader)
        5 -> curated = nullableBooleanAdapter.fromJson(reader)
        6 -> featured = nullableBooleanAdapter.fromJson(reader)
        7 -> total_photos = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("total_photos",
            "total_photos", reader)
        8 -> private_ = nullableBooleanAdapter.fromJson(reader)
        9 -> share_key = nullableStringAdapter.fromJson(reader)
        10 -> tags = nullableListOfTagAdapter.fromJson(reader)
        11 -> cover_photo = nullablePhotoAdapter.fromJson(reader)
        12 -> preview_photos = nullableListOfPhotoAdapter.fromJson(reader)
        13 -> user = nullableUserAdapter.fromJson(reader)
        14 -> links = nullableLinksAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Collection(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        description = description,
        published_at = published_at,
        updated_at = updated_at,
        curated = curated,
        featured = featured,
        total_photos = total_photos ?: throw Util.missingProperty("total_photos", "total_photos",
            reader),
        `private` = private_,
        share_key = share_key,
        tags = tags,
        cover_photo = cover_photo,
        preview_photos = preview_photos,
        user = user,
        links = links
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Collection?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("description")
    nullableStringAdapter.toJson(writer, value_.description)
    writer.name("published_at")
    nullableStringAdapter.toJson(writer, value_.published_at)
    writer.name("updated_at")
    nullableStringAdapter.toJson(writer, value_.updated_at)
    writer.name("curated")
    nullableBooleanAdapter.toJson(writer, value_.curated)
    writer.name("featured")
    nullableBooleanAdapter.toJson(writer, value_.featured)
    writer.name("total_photos")
    intAdapter.toJson(writer, value_.total_photos)
    writer.name("private")
    nullableBooleanAdapter.toJson(writer, value_.`private`)
    writer.name("share_key")
    nullableStringAdapter.toJson(writer, value_.share_key)
    writer.name("tags")
    nullableListOfTagAdapter.toJson(writer, value_.tags)
    writer.name("cover_photo")
    nullablePhotoAdapter.toJson(writer, value_.cover_photo)
    writer.name("preview_photos")
    nullableListOfPhotoAdapter.toJson(writer, value_.preview_photos)
    writer.name("user")
    nullableUserAdapter.toJson(writer, value_.user)
    writer.name("links")
    nullableLinksAdapter.toJson(writer, value_.links)
    writer.endObject()
  }
}

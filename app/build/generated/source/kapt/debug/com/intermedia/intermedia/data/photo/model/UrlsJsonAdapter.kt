// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.photo.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class UrlsJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Urls>() {
  private val options: JsonReader.Options = JsonReader.Options.of("raw", "full", "regular", "small",
      "thumb")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "raw")

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Urls").append(')') }

  public override fun fromJson(reader: JsonReader): Urls {
    var raw: String? = null
    var full: String? = null
    var regular: String? = null
    var small: String? = null
    var thumb: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> raw = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("raw", "raw", reader)
        1 -> full = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("full", "full",
            reader)
        2 -> regular = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("regular",
            "regular", reader)
        3 -> small = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("small", "small",
            reader)
        4 -> thumb = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("thumb", "thumb",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Urls(
        raw = raw ?: throw Util.missingProperty("raw", "raw", reader),
        full = full ?: throw Util.missingProperty("full", "full", reader),
        regular = regular ?: throw Util.missingProperty("regular", "regular", reader),
        small = small ?: throw Util.missingProperty("small", "small", reader),
        thumb = thumb ?: throw Util.missingProperty("thumb", "thumb", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Urls?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("raw")
    stringAdapter.toJson(writer, value_.raw)
    writer.name("full")
    stringAdapter.toJson(writer, value_.full)
    writer.name("regular")
    stringAdapter.toJson(writer, value_.regular)
    writer.name("small")
    stringAdapter.toJson(writer, value_.small)
    writer.name("thumb")
    stringAdapter.toJson(writer, value_.thumb)
    writer.endObject()
  }
}

// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.photo.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ExifJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Exif>() {
  private val options: JsonReader.Options = JsonReader.Options.of("make", "model", "exposure_time",
      "aperture", "focal_length", "iso")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "make")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "iso")

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Exif").append(')') }

  public override fun fromJson(reader: JsonReader): Exif {
    var make: String? = null
    var model: String? = null
    var exposure_time: String? = null
    var aperture: String? = null
    var focal_length: String? = null
    var iso: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> make = nullableStringAdapter.fromJson(reader)
        1 -> model = nullableStringAdapter.fromJson(reader)
        2 -> exposure_time = nullableStringAdapter.fromJson(reader)
        3 -> aperture = nullableStringAdapter.fromJson(reader)
        4 -> focal_length = nullableStringAdapter.fromJson(reader)
        5 -> iso = nullableIntAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Exif(
        make = make,
        model = model,
        exposure_time = exposure_time,
        aperture = aperture,
        focal_length = focal_length,
        iso = iso
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Exif?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("make")
    nullableStringAdapter.toJson(writer, value_.make)
    writer.name("model")
    nullableStringAdapter.toJson(writer, value_.model)
    writer.name("exposure_time")
    nullableStringAdapter.toJson(writer, value_.exposure_time)
    writer.name("aperture")
    nullableStringAdapter.toJson(writer, value_.aperture)
    writer.name("focal_length")
    nullableStringAdapter.toJson(writer, value_.focal_length)
    writer.name("iso")
    nullableIntAdapter.toJson(writer, value_.iso)
    writer.endObject()
  }
}

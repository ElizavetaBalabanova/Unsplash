// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.common.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class HistoricalJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Historical>() {
  private val options: JsonReader.Options = JsonReader.Options.of("change", "resolution", "quality",
      "values")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "change")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "resolution")

  private val listOfValueAdapter: JsonAdapter<List<Value>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Value::class.java), emptySet(),
      "values")

  public override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("Historical").append(')') }

  public override fun fromJson(reader: JsonReader): Historical {
    var change: Int? = null
    var resolution: String? = null
    var quality: String? = null
    var values: List<Value>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> change = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("change", "change",
            reader)
        1 -> resolution = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("resolution",
            "resolution", reader)
        2 -> quality = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("quality",
            "quality", reader)
        3 -> values = listOfValueAdapter.fromJson(reader) ?: throw Util.unexpectedNull("values",
            "values", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Historical(
        change = change ?: throw Util.missingProperty("change", "change", reader),
        resolution = resolution ?: throw Util.missingProperty("resolution", "resolution", reader),
        quality = quality ?: throw Util.missingProperty("quality", "quality", reader),
        values = values ?: throw Util.missingProperty("values", "values", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Historical?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("change")
    intAdapter.toJson(writer, value_.change)
    writer.name("resolution")
    stringAdapter.toJson(writer, value_.resolution)
    writer.name("quality")
    stringAdapter.toJson(writer, value_.quality)
    writer.name("values")
    listOfValueAdapter.toJson(writer, value_.values)
    writer.endObject()
  }
}

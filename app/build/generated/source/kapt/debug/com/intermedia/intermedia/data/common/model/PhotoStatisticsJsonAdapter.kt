// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.common.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PhotoStatisticsJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<PhotoStatistics>() {
  private val options: JsonReader.Options = JsonReader.Options.of("id", "downloads", "views",
      "likes")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val downloadsAdapter: JsonAdapter<Downloads> = moshi.adapter(Downloads::class.java,
      emptySet(), "downloads")

  private val viewsAdapter: JsonAdapter<Views> = moshi.adapter(Views::class.java, emptySet(),
      "views")

  private val likesAdapter: JsonAdapter<Likes> = moshi.adapter(Likes::class.java, emptySet(),
      "likes")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("PhotoStatistics").append(')') }

  public override fun fromJson(reader: JsonReader): PhotoStatistics {
    var id: String? = null
    var downloads: Downloads? = null
    var views: Views? = null
    var likes: Likes? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "id", reader)
        1 -> downloads = downloadsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("downloads",
            "downloads", reader)
        2 -> views = viewsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("views", "views",
            reader)
        3 -> likes = likesAdapter.fromJson(reader) ?: throw Util.unexpectedNull("likes", "likes",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return PhotoStatistics(
        id = id ?: throw Util.missingProperty("id", "id", reader),
        downloads = downloads ?: throw Util.missingProperty("downloads", "downloads", reader),
        views = views ?: throw Util.missingProperty("views", "views", reader),
        likes = likes ?: throw Util.missingProperty("likes", "likes", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: PhotoStatistics?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("downloads")
    downloadsAdapter.toJson(writer, value_.downloads)
    writer.name("views")
    viewsAdapter.toJson(writer, value_.views)
    writer.name("likes")
    likesAdapter.toJson(writer, value_.likes)
    writer.endObject()
  }
}

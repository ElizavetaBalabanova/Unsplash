// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.collection.model

import com.intermedia.intermedia.`data`.photo.model.Photo
import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CollectionPhotoResultJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<CollectionPhotoResult>() {
  private val options: JsonReader.Options = JsonReader.Options.of("photo", "collection")

  private val nullablePhotoAdapter: JsonAdapter<Photo?> = moshi.adapter(Photo::class.java,
      emptySet(), "photo")

  private val nullableCollectionAdapter: JsonAdapter<Collection?> =
      moshi.adapter(Collection::class.java, emptySet(), "collection")

  public override fun toString(): String = buildString(43) {
      append("GeneratedJsonAdapter(").append("CollectionPhotoResult").append(')') }

  public override fun fromJson(reader: JsonReader): CollectionPhotoResult {
    var photo: Photo? = null
    var collection: Collection? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> photo = nullablePhotoAdapter.fromJson(reader)
        1 -> collection = nullableCollectionAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return CollectionPhotoResult(
        photo = photo,
        collection = collection
    )
  }

  public override fun toJson(writer: JsonWriter, value_: CollectionPhotoResult?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("photo")
    nullablePhotoAdapter.toJson(writer, value_.photo)
    writer.name("collection")
    nullableCollectionAdapter.toJson(writer, value_.collection)
    writer.endObject()
  }
}

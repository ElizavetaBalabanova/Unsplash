// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.photo.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LocationJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Location>() {
  private val options: JsonReader.Options = JsonReader.Options.of("city", "country", "position")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "city")

  private val nullablePositionAdapter: JsonAdapter<Position?> = moshi.adapter(Position::class.java,
      emptySet(), "position")

  public override fun toString(): String = buildString(30) {
      append("GeneratedJsonAdapter(").append("Location").append(')') }

  public override fun fromJson(reader: JsonReader): Location {
    var city: String? = null
    var country: String? = null
    var position: Position? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> city = nullableStringAdapter.fromJson(reader)
        1 -> country = nullableStringAdapter.fromJson(reader)
        2 -> position = nullablePositionAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Location(
        city = city,
        country = country,
        position = position
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Location?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("city")
    nullableStringAdapter.toJson(writer, value_.city)
    writer.name("country")
    nullableStringAdapter.toJson(writer, value_.country)
    writer.name("position")
    nullablePositionAdapter.toJson(writer, value_.position)
    writer.endObject()
  }
}

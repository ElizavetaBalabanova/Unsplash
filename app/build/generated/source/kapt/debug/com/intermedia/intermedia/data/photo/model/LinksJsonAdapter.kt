// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.intermedia.intermedia.`data`.photo.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LinksJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Links>() {
  private val options: JsonReader.Options = JsonReader.Options.of("self", "html", "download",
      "download_location")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "self")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Links").append(')') }

  public override fun fromJson(reader: JsonReader): Links {
    var self: String? = null
    var html: String? = null
    var download: String? = null
    var download_location: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> self = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("self", "self",
            reader)
        1 -> html = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("html", "html",
            reader)
        2 -> download = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("download",
            "download", reader)
        3 -> download_location = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("download_location", "download_location", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Links(
        self = self ?: throw Util.missingProperty("self", "self", reader),
        html = html ?: throw Util.missingProperty("html", "html", reader),
        download = download ?: throw Util.missingProperty("download", "download", reader),
        download_location = download_location ?: throw Util.missingProperty("download_location",
            "download_location", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Links?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("self")
    stringAdapter.toJson(writer, value_.self)
    writer.name("html")
    stringAdapter.toJson(writer, value_.html)
    writer.name("download")
    stringAdapter.toJson(writer, value_.download)
    writer.name("download_location")
    stringAdapter.toJson(writer, value_.download_location)
    writer.endObject()
  }
}

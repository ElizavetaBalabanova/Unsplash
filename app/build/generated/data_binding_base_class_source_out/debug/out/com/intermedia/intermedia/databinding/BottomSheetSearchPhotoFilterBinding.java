// Generated by view binder compiler. Do not edit!
package com.intermedia.intermedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.button.MaterialButtonToggleGroup;
import com.google.android.material.textfield.TextInputLayout;
import com.intermedia.intermedia.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BottomSheetSearchPhotoFilterBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final MaterialButton applyButton;

  @NonNull
  public final TextInputLayout colorFilterDropdownMenu;

  @NonNull
  public final TextView colorFilterTitle;

  @NonNull
  public final MaterialButton contentFilterHighButton;

  @NonNull
  public final MaterialButton contentFilterLowButton;

  @NonNull
  public final TextView contentFilterTitle;

  @NonNull
  public final MaterialButtonToggleGroup contentFilterToggleGroup;

  @NonNull
  public final MaterialButtonToggleGroup orderByToggleGroup;

  @NonNull
  public final MaterialButton orderLatestButton;

  @NonNull
  public final MaterialButton orderRelevanceButton;

  @NonNull
  public final MaterialButton orientationAnyButton;

  @NonNull
  public final MaterialButton orientationLandscapeButton;

  @NonNull
  public final MaterialButton orientationPortraitButton;

  @NonNull
  public final MaterialButton orientationSquareButton;

  @NonNull
  public final TextView orientationTitle;

  @NonNull
  public final MaterialButtonToggleGroup orientationToggleGroup;

  private BottomSheetSearchPhotoFilterBinding(@NonNull NestedScrollView rootView,
      @NonNull MaterialButton applyButton, @NonNull TextInputLayout colorFilterDropdownMenu,
      @NonNull TextView colorFilterTitle, @NonNull MaterialButton contentFilterHighButton,
      @NonNull MaterialButton contentFilterLowButton, @NonNull TextView contentFilterTitle,
      @NonNull MaterialButtonToggleGroup contentFilterToggleGroup,
      @NonNull MaterialButtonToggleGroup orderByToggleGroup,
      @NonNull MaterialButton orderLatestButton, @NonNull MaterialButton orderRelevanceButton,
      @NonNull MaterialButton orientationAnyButton,
      @NonNull MaterialButton orientationLandscapeButton,
      @NonNull MaterialButton orientationPortraitButton,
      @NonNull MaterialButton orientationSquareButton, @NonNull TextView orientationTitle,
      @NonNull MaterialButtonToggleGroup orientationToggleGroup) {
    this.rootView = rootView;
    this.applyButton = applyButton;
    this.colorFilterDropdownMenu = colorFilterDropdownMenu;
    this.colorFilterTitle = colorFilterTitle;
    this.contentFilterHighButton = contentFilterHighButton;
    this.contentFilterLowButton = contentFilterLowButton;
    this.contentFilterTitle = contentFilterTitle;
    this.contentFilterToggleGroup = contentFilterToggleGroup;
    this.orderByToggleGroup = orderByToggleGroup;
    this.orderLatestButton = orderLatestButton;
    this.orderRelevanceButton = orderRelevanceButton;
    this.orientationAnyButton = orientationAnyButton;
    this.orientationLandscapeButton = orientationLandscapeButton;
    this.orientationPortraitButton = orientationPortraitButton;
    this.orientationSquareButton = orientationSquareButton;
    this.orientationTitle = orientationTitle;
    this.orientationToggleGroup = orientationToggleGroup;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static BottomSheetSearchPhotoFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BottomSheetSearchPhotoFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bottom_sheet_search_photo_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BottomSheetSearchPhotoFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.apply_button;
      MaterialButton applyButton = ViewBindings.findChildViewById(rootView, id);
      if (applyButton == null) {
        break missingId;
      }

      id = R.id.color_filter_dropdown_menu;
      TextInputLayout colorFilterDropdownMenu = ViewBindings.findChildViewById(rootView, id);
      if (colorFilterDropdownMenu == null) {
        break missingId;
      }

      id = R.id.color_filter_title;
      TextView colorFilterTitle = ViewBindings.findChildViewById(rootView, id);
      if (colorFilterTitle == null) {
        break missingId;
      }

      id = R.id.content_filter_high_button;
      MaterialButton contentFilterHighButton = ViewBindings.findChildViewById(rootView, id);
      if (contentFilterHighButton == null) {
        break missingId;
      }

      id = R.id.content_filter_low_button;
      MaterialButton contentFilterLowButton = ViewBindings.findChildViewById(rootView, id);
      if (contentFilterLowButton == null) {
        break missingId;
      }

      id = R.id.content_filter_title;
      TextView contentFilterTitle = ViewBindings.findChildViewById(rootView, id);
      if (contentFilterTitle == null) {
        break missingId;
      }

      id = R.id.content_filter_toggle_group;
      MaterialButtonToggleGroup contentFilterToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (contentFilterToggleGroup == null) {
        break missingId;
      }

      id = R.id.order_by_toggle_group;
      MaterialButtonToggleGroup orderByToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (orderByToggleGroup == null) {
        break missingId;
      }

      id = R.id.order_latest_button;
      MaterialButton orderLatestButton = ViewBindings.findChildViewById(rootView, id);
      if (orderLatestButton == null) {
        break missingId;
      }

      id = R.id.order_relevance_button;
      MaterialButton orderRelevanceButton = ViewBindings.findChildViewById(rootView, id);
      if (orderRelevanceButton == null) {
        break missingId;
      }

      id = R.id.orientation_any_button;
      MaterialButton orientationAnyButton = ViewBindings.findChildViewById(rootView, id);
      if (orientationAnyButton == null) {
        break missingId;
      }

      id = R.id.orientation_landscape_button;
      MaterialButton orientationLandscapeButton = ViewBindings.findChildViewById(rootView, id);
      if (orientationLandscapeButton == null) {
        break missingId;
      }

      id = R.id.orientation_portrait_button;
      MaterialButton orientationPortraitButton = ViewBindings.findChildViewById(rootView, id);
      if (orientationPortraitButton == null) {
        break missingId;
      }

      id = R.id.orientation_square_button;
      MaterialButton orientationSquareButton = ViewBindings.findChildViewById(rootView, id);
      if (orientationSquareButton == null) {
        break missingId;
      }

      id = R.id.orientation_title;
      TextView orientationTitle = ViewBindings.findChildViewById(rootView, id);
      if (orientationTitle == null) {
        break missingId;
      }

      id = R.id.orientation_toggle_group;
      MaterialButtonToggleGroup orientationToggleGroup = ViewBindings.findChildViewById(rootView, id);
      if (orientationToggleGroup == null) {
        break missingId;
      }

      return new BottomSheetSearchPhotoFilterBinding((NestedScrollView) rootView, applyButton,
          colorFilterDropdownMenu, colorFilterTitle, contentFilterHighButton,
          contentFilterLowButton, contentFilterTitle, contentFilterToggleGroup, orderByToggleGroup,
          orderLatestButton, orderRelevanceButton, orientationAnyButton, orientationLandscapeButton,
          orientationPortraitButton, orientationSquareButton, orientationTitle,
          orientationToggleGroup);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
